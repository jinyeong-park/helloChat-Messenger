[{"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/App.js":"1","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Sidebar.js":"2","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/SidebarChat.js":"3","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Chat.js":"4","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/index.js":"5","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/reportWebVitals.js":"6","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/firebase.js":"7","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Login.js":"8","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/StateProvider.js":"9","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/reducer.js":"10"},{"size":955,"mtime":1611481663778,"results":"11","hashOfConfig":"12"},{"size":1955,"mtime":1611482053114,"results":"13","hashOfConfig":"12"},{"size":1355,"mtime":1611488923350,"results":"14","hashOfConfig":"12"},{"size":3624,"mtime":1611487856458,"results":"15","hashOfConfig":"12"},{"size":685,"mtime":1611480139096,"results":"16","hashOfConfig":"12"},{"size":362,"mtime":1611194569610,"results":"17","hashOfConfig":"12"},{"size":658,"mtime":1611446935741,"results":"18","hashOfConfig":"12"},{"size":952,"mtime":1611481548683,"results":"19","hashOfConfig":"12"},{"size":364,"mtime":1611464960119,"results":"20","hashOfConfig":"12"},{"size":353,"mtime":1611479724778,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1xaxkig",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/App.js",["46","47","48"],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Sidebar.js",["49"],"import React, { useState, useEffect } from 'react';\nimport '../styles/Sidebar.css';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SidebarChat from './SidebarChat';\nimport db from '../firebase';\nimport { useStateValue } from '../StateProvider';\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    // [Get] read current rooms\n    // onSnapshot : realtime listener\n    const unsubscribe = db.collection('rooms').onSnapshot((snapshot) =>\n      // console.log('snapshot', snapshot)\n      setRooms(\n        snapshot.docs.map(doc => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n    // clean up - after using it, unsubscribe(unmount)\n    return () => {\n      unsubscribe();\n    }\n\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n\n      <div className=\"sidebar__header\">\n        <Avatar src={user?.photoURL}/>\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchIcon />\n          <input placeholder=\"Search or start new chat\">\n          </input>\n        </div>\n      </div>\n\n      <div className=\"sidebar__chat\">\n        {/* Show chat rooms */}\n        <SidebarChat addNewChat/>\n        {rooms.map(room => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Sidebar\n",["50","51"],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/SidebarChat.js",[],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Chat.js",["52","53"],"import '../styles/Chat.css';\nimport React, {useState,useEffect} from 'react';\nimport {Avatar, IconButton} from '@material-ui/core';\nimport {AttachFile, MoreVert, SearchOutlined} from '@material-ui/icons';\nimport MicIcon from '@material-ui/icons/Mic';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { useParams } from 'react-router-dom';\nimport db from '../firebase';\nimport firebase from 'firebase';\nimport {useStateValue} from \"../StateProvider\";\n\nfunction Chat() {\n    const [input, setInput] = useState(\"\");\n    const [seed, setSeed] = useState(\"\");\n    const {roomId} = useParams();\n    const [roomName, setRoomName] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [{user}, dispatch] = useStateValue();\n\n    useEffect(()=>{\n        if(roomId){\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => {\n                setRoomName(snapshot.data().name);\n            });\n\n            db.collection('rooms').doc(roomId).collection(\"messages\").orderBy(\"timestamp\",\"asc\").onSnapshot(snapshot => {\n                setMessages(snapshot.docs.map(doc => doc.data()))\n            });\n\n        }\n    },[roomId])\n\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000));\n    }, [roomId]);\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        db.collection('rooms').doc(roomId).collection('messages').add({\n            message: input,\n            name: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        })\n\n        setInput(\"\");\n    }\n\n    return (\n        <div className='chat'>\n            <div className='chat__header'>\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\n                <div className='chat__headerInfo'>\n                    <h3 className='chat-room-name'>{roomName}</h3>\n                    <p className='chat-room-last-seen'>\n                        Last seen {\" \"}\n                        {new Date(\n                            messages[messages.length - 1]?.\n                            timestamp?.toDate()\n                        ).toUTCString()}\n                    </p>\n                </div>\n                <div className=\"chat__headerRight\">\n                    <IconButton>\n                        <SearchOutlined/>\n                    </IconButton>\n                    <IconButton>\n                        <AttachFile/>\n                    </IconButton>\n                    <IconButton>\n                        <MoreVert/>\n                    </IconButton>\n\n                </div>\n            </div>\n            <div className='chat__body'>\n                {messages.map(message => (\n                    <p className={`chat__message ${ message.name === user.displayName && 'chat__receiver'}`}>\n                        <span className=\"chat__name\">{message.name}</span>\n                        {message.message}\n                        <span className=\"chat__timestamp\">{new Date(message.timestamp?.toDate()).toUTCString()}</span>\n                    </p>\n                ))}\n            </div>\n            <div className='chat__footer'>\n                <InsertEmoticonIcon />\n                <form>\n                    <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder=\"Type a message\"/>\n                     {/* when clicking input => send message but make it invisible*/}\n                    <button type=\"submit\" onClick={sendMessage}> Send a Message</button>\n                </form>\n                <MicIcon/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Chat\n","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/index.js",[],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/reportWebVitals.js",[],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/firebase.js",[],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/components/Login.js",["54"],"import React from 'react'\nimport { Button } from '@material-ui/core';\nimport '../styles/Login.css';\nimport { auth, provider } from '../firebase';\nimport { useStateValue } from '../StateProvider'\nimport { actionTypes } from \"../reducer\"\n\nfunction Login() {\n  // const [{ user }, dispatch] = useStateValue();\n  const [{}, dispatch] = useStateValue();\n\n  const sighIn = () => {\n    auth\n    .signInWithPopup(provider)\n    .then((result) => {\n      dispatch({\n        type: actionTypes.SET_USER,\n        user: result.user,\n      })\n    })\n    .catch((error) => alert(error.message));\n\n  }\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n      <img src=\"https://i.imgur.com/69xYioI.png\" alt=\"\"/>\n        <div className=\"login__text\">\n          <h1>Sign in to HelloTalk</h1>\n        </div>\n\n        <Button onClick={sighIn}>\n          Sign In With Google\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/StateProvider.js",[],"/Users/jinyeongpark/Documents/0_HRSF130_Aug/W11_MVP/helloChat-web/hellochat-web/src/reducer.js",[],{"ruleId":"55","severity":1,"message":"56","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"59","line":10,"column":3,"nodeType":"57","messageId":"58","endLine":10,"endColumn":7},{"ruleId":"55","severity":1,"message":"60","line":16,"column":21,"nodeType":"57","messageId":"58","endLine":16,"endColumn":29},{"ruleId":"55","severity":1,"message":"60","line":14,"column":20,"nodeType":"57","messageId":"58","endLine":14,"endColumn":28},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"55","severity":1,"message":"60","line":18,"column":20,"nodeType":"57","messageId":"58","endLine":18,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":57,"column":58,"nodeType":"67","messageId":"68","endLine":57,"endColumn":60,"fix":"69"},{"ruleId":"70","severity":1,"message":"71","line":10,"column":10,"nodeType":"72","messageId":"73","endLine":10,"endColumn":12},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'dispatch' is assigned a value but never used.","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"76","text":"77"},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation",[2056,2087],"\n                            ?."]